# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: product_info.proto
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\x12product_info.proto\x12\tecommerce\"\x1a\n\tProductID\x12\r\n\x05value\x18\x01 \x01(\t\"G\n\x07Product\x12\n\n\x02id\x18\x01 \x01(\t\x12\x0c\n\x04name\x18\x02 \x01(\t\x12\x13\n\x0b\x64\x65scription\x18\x03 \x01(\t\x12\r\n\x05price\x18\x04 \x01(\x02\x32}\n\x0bProductInfo\x12\x36\n\naddProduct\x12\x12.ecommerce.Product\x1a\x14.ecommerce.ProductID\x12\x36\n\ngetProduct\x12\x14.ecommerce.ProductID\x1a\x12.ecommerce.ProductB\rZ\x0b./ecommerceb\x06proto3')



_PRODUCTID = DESCRIPTOR.message_types_by_name['ProductID']
_PRODUCT = DESCRIPTOR.message_types_by_name['Product']
ProductID = _reflection.GeneratedProtocolMessageType('ProductID', (_message.Message,), {
  'DESCRIPTOR' : _PRODUCTID,
  '__module__' : 'product_info_pb2'
  # @@protoc_insertion_point(class_scope:ecommerce.ProductID)
  })
_sym_db.RegisterMessage(ProductID)

Product = _reflection.GeneratedProtocolMessageType('Product', (_message.Message,), {
  'DESCRIPTOR' : _PRODUCT,
  '__module__' : 'product_info_pb2'
  # @@protoc_insertion_point(class_scope:ecommerce.Product)
  })
_sym_db.RegisterMessage(Product)

_PRODUCTINFO = DESCRIPTOR.services_by_name['ProductInfo']
if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  DESCRIPTOR._serialized_options = b'Z\013./ecommerce'
  _PRODUCTID._serialized_start=33
  _PRODUCTID._serialized_end=59
  _PRODUCT._serialized_start=61
  _PRODUCT._serialized_end=132
  _PRODUCTINFO._serialized_start=134
  _PRODUCTINFO._serialized_end=259
# @@protoc_insertion_point(module_scope)
